#Require "./src/lib/Memory.rlx"
#Require "./src/lib/File.rlx"
#Require "./src/lib/Console.rlx"
#Require "./src/lib/SafeString.rlx"
#Require "./src/lib/HashMap.rlx"
#Require "./src/lib/Debug.rlx"

#Require "./src/compiler/Lexer.rlx"

; Symbolic register numbers/types for matching written instructions to actual opcodes

i32 Z80_R_B 		:= 0x00_0001
i32 Z80_R_C 		:= 0x00_0002
i32 Z80_R_D 		:= 0x00_0004
i32 Z80_R_E 		:= 0x00_0008
i32 Z80_R_H 		:= 0x00_0010
i32 Z80_R_L 		:= 0x00_0020
i32 Z80_RI_HL 		:= 0x00_0040
i32 Z80_R_A 		:= 0x00_0080

i32 Z80_R 			:= 0x00_00FF

i32 Z80_RP_BC 		:= 0x00_0100
i32 Z80_RP_DE 		:= 0x00_0200
i32 Z80_RP_HL 		:= 0x00_0400
i32 Z80_RP_SP 		:= 0x00_0800

i32 Z80_RP 			:= 0x00_0F00

i32 Z80_RPI_BC 		:= 0x00_1000
i32 Z80_RPI_DE 		:= 0x00_2000
i32 Z80_RPI_HL 		:= 0x00_4000
i32 Z80_RPI_SP 		:= 0x00_8000

i32 Z80_RPI			:= 0x00_F000

i32 Z80_RP2_AF 		:= 0x01_0000
i32 Z80_RP2I_AF 	:= 0x02_0000

i32 Z80_RP2			:= 0x01_0700
i32 Z80_RP2I		:= 0x02_7000	; RPI - Z80_RPI_SP, since Z80_RPI_SP means Z80_RP2I_AF in the context of an RP2 instruction

i32 Z80_I			:= 0x04_0000
i32 Z80_I8 			:= 0x04_0000
i32 Z80_I16 		:= 0x04_0000
i32 Z80_I16I 		:= 0x10_0000

i32 Z80_IRV			:= 0x20_0000	; I register, interupt vector
i32 Z80_RFC			:= 0x40_0000	; R register, refresh counter

i32 Z80_IX			:= 0x80_0000
i32 Z80_IY		   := 0x100_0000

i32 Z80_IXL		   := 0x200_0000
i32 Z80_IXH		   := 0x400_0000
i32 Z80_IYL		   := 0x800_0000
i32 Z80_IYH		  := 0x1000_0000

i32 Z80_IX_DISP	  := 0x2000_0000
i32 Z80_IY_DISP   := 0x4000_0000

; Flags an instruction defines to have a certain operand's register number placed into an opcode field

i32 Z80_P_IS_OP1 	:= 0x0001
i32 Z80_Y_IS_OP1 	:= 0x0002
i32 Z80_Z_IS_OP1 	:= 0x0004
i32 Z80_I_IS_OP1 	:= 0x0008

i32 Z80_P_IS_OP2 	:= 0x0010
i32 Z80_Y_IS_OP2 	:= 0x0020
i32 Z80_Z_IS_OP2 	:= 0x0040
i32 Z80_I_IS_OP2 	:= 0x0080

i32 Z80_OP1_IS_REGISTER := 0xF
i32 Z80_OP2_IS_REGISTER := 0xF0

i32 Z80_D_IS_OP1 	:= 0x0100
i32 Z80_D_IS_OP2 	:= 0x0200

; Flags to push a immediate value after the instruction

i32 Z80_HAS_I8 		:= 0x0400
i32 Z80_HAS_I16		:= 0x0800

; Flags for prefix bytes

i32 Z80_PREFIX_ED := 0x1000
i32 Z80_PREFIX_CB := 0x2000
i32 Z80_PREFIX_DD := 0x4000
i32 Z80_PREFIX_FD := 0x8000

; Flag for relative jumps

i32 Z80_IS_RELATIVE := 0x10000

; Instruction definition, holds the operand types/opcode/flags which define a single actual instruction

struct Z80Instruction {
	union {
		i32{2} Operands
		i64 PackedOperands
	}
	
	i16 Opcode
	i32 Flags
	
	Z80Instruction* Next
	
	SafeWideString* Name
	
	define void Print() {
		Print("Opcode %x\n", this->Opcode)
	}
}

i8 Z80_REGISTER_B	:= 0
i8 Z80_REGISTER_C	:= 1
i8 Z80_REGISTER_D 	:= 2
i8 Z80_REGISTER_E 	:= 3
i8 Z80_REGISTER_H 	:= 4
i8 Z80_REGISTER_L 	:= 5
i8 Z80_REGISTER_HLI := 6
i8 Z80_REGISTER_A 	:= 7

i8 Z80_REGISTER_BC	:= 0
i8 Z80_REGISTER_DE	:= 1
i8 Z80_REGISTER_HL	:= 2
i8 Z80_REGISTER_SP	:= 3
i8 Z80_REGISTER_AF	:= 3

; These values are made up so `Z80Assembler.LookupRegister` will output the correct type for the I/R/IX/IY registers

i8 Z80_REGISTER_I := 21
i8 Z80_REGISTER_R := 22

i8 Z80_REGISTER_IX := 23
i8 Z80_REGISTER_IY := 24

i8 Z80_REGISTER_IXL	:= 25
i8 Z80_REGISTER_IXH	:= 26
i8 Z80_REGISTER_IYL := 27
i8 Z80_REGISTER_IYH := 28

struct Z80InstructionNode {
	Z80Instruction* Base
	
	i32 OperandCount
	
	union {
		i32{2} Operands
	}
	
	i64 PackedOperands
}

i32 Z80_MEMORY_SIZE := 0x1_0000

define i8 FindFirstBitSet(i64 Number) asm {
	bsr, rax, rdi
	ret
}

struct Z80Assembler {
	HashMap Instructions
	HashMap Registers
	
	LexerState* Lexer
	
	declare void LoadInstructions(i8*)
	
	i32 MemoryIndex
	
	union {
		void* Memory
		i8* MemoryBytes
	}
	
	i16* LabelPositions
	i32* LabelReferences
	
	i32 LabelPositionCount
	i32 LabelReferenceCount
	
	HashMap* LabelNameToIndex
	HashMap* Constants
	
	Token** LabelReferenceBlameTokens
	
	Z80Instruction** NoPrefixInstructions
	Z80Instruction** EDInstructions
	Z80Instruction** CBInstructions
	Z80Instruction** DDInstructions
	Z80Instruction** FDInstructions
	Z80Instruction** CBDDInstructions
	Z80Instruction** CBFDInstructions
	
	static Z80Assembler* New(i8* InstructionListing, i8* SourceText) {
		Z80Assembler* this := Alloc(#Z80Assembler)
		
		i32 OpcodeMapSize := 0xFF * #Z80Instruction*
		
		this->NoPrefixInstructions := Alloc(OpcodeMapSize)
		this->EDInstructions := Alloc(OpcodeMapSize)
		this->CBInstructions := Alloc(OpcodeMapSize)
		this->DDInstructions := Alloc(OpcodeMapSize)
		this->FDInstructions := Alloc(OpcodeMapSize)
		this->CBDDInstructions := Alloc(OpcodeMapSize)
		this->CBFDInstructions := Alloc(OpcodeMapSize)
		
		this->LoadInstructions(InstructionListing)
		
		HashMap* Registers := this~>Registers
		
		Registers->Initialize()
		Registers->IgnoreCase := true
		
		Registers->Set("a", Z80_REGISTER_A)
		Registers->Set("b", Z80_REGISTER_B)
		Registers->Set("c", Z80_REGISTER_C)
		Registers->Set("d", Z80_REGISTER_D)
		Registers->Set("e", Z80_REGISTER_E)
		Registers->Set("h", Z80_REGISTER_H)
		Registers->Set("l", Z80_REGISTER_L)
		Registers->Set("hlb", Z80_REGISTER_HLI)
		
		Registers->Set("bc", Z80_REGISTER_BC)
		Registers->Set("de", Z80_REGISTER_DE)
		Registers->Set("hl", Z80_REGISTER_HL)
		Registers->Set("sp", Z80_REGISTER_SP)
		Registers->Set("af", Z80_REGISTER_AF)
		
		Registers->Set("i", Z80_REGISTER_I)
		Registers->Set("r", Z80_REGISTER_R)
		
		Registers->Set("ix", Z80_REGISTER_IX)
		Registers->Set("iy", Z80_REGISTER_IY)
		
		Registers->Set("ixl", Z80_REGISTER_IXL)
		Registers->Set("ixh", Z80_REGISTER_IXH)
		Registers->Set("iyl", Z80_REGISTER_IYL)
		Registers->Set("iyh", Z80_REGISTER_IYH)
		
		
		i32 Length := StringLength(SourceText)
		this->Lexer := LexerState:New(Alloc(#BuildConfig), AToW(SourceText, Length), Length, AToS("N/A"))
		
		this->Memory := Alloc(Z80_MEMORY_SIZE)
		
		this->LabelPositions := Alloc(4)
		this->LabelReferenceBlameTokens := Alloc(8)
		
		this->LabelReferences := Alloc(4)
		
		this->LabelNameToIndex := HashMap:New()
		this->Constants := HashMap:New()
		
		return this
	}
	
	define void BuildSymbolMap(HashMap* M) {
		M->Initialize()
		M->IgnoreCase := true
		
		M->Set("_", 0)
		
		M->Set("a", Z80_R_A)
		M->Set("b", Z80_R_B)
		M->Set("c", Z80_R_C)
		M->Set("d", Z80_R_D)
		M->Set("e", Z80_R_E)
		M->Set("h", Z80_R_H)
		M->Set("l", Z80_R_L)
		M->Set("hlb", Z80_RI_HL)
		
		M->Set("r", Z80_R)
		
		M->Set("bc", Z80_RP_BC)
		M->Set("de", Z80_RP_DE)
		M->Set("hl", Z80_RP_HL)
		M->Set("sp", Z80_RP_SP)
		
		M->Set("rp", Z80_RP)
		
		M->Set("bci", Z80_RPI_BC)
		M->Set("dei", Z80_RPI_DE)
		M->Set("hli", Z80_RPI_HL)
		M->Set("spi", Z80_RPI_SP)
		
		M->Set("rpi", Z80_RPI)
		
		M->Set("af", Z80_RP2_AF)
		M->Set("afi", Z80_RP2I_AF)
		
		M->Set("rp2", Z80_RP2)
		M->Set("rp2i", Z80_RP2I)
		
		M->Set("i8", Z80_I8)
		M->Set("i16", Z80_I16)
		M->Set("i16i", Z80_I16I)
		
		M->Set("irv", Z80_IRV)
		M->Set("rfc", Z80_RFC)
		
		M->Set("ix", Z80_IX)
		M->Set("iy", Z80_IY)
		
		M->Set("ixd", Z80_IX_DISP)
		M->Set("iyd", Z80_IY_DISP)
		
		M->Set("ixl", Z80_IXL)
		M->Set("ixh", Z80_IXH)
		M->Set("iyl", Z80_IYL)
		M->Set("iyh", Z80_IYH)
		
		M->Set("P_IS_OP1", Z80_P_IS_OP1)
		M->Set("Y_IS_OP1", Z80_Y_IS_OP1)
		M->Set("Z_IS_OP1", Z80_Z_IS_OP1)
		M->Set("I_IS_OP1", Z80_I_IS_OP1)
		M->Set("D_IS_OP1", Z80_D_IS_OP1)
		
		M->Set("P_IS_OP2", Z80_P_IS_OP2)
		M->Set("Y_IS_OP2", Z80_Y_IS_OP2)
		M->Set("Z_IS_OP2", Z80_Z_IS_OP2)
		M->Set("I_IS_OP2", Z80_I_IS_OP2)
		M->Set("D_IS_OP2", Z80_D_IS_OP2)
		
		M->Set("IMM8", Z80_HAS_I8)
		M->Set("IMM16", Z80_HAS_I16)
		
		M->Set("ED", Z80_PREFIX_ED)
		M->Set("CB", Z80_PREFIX_CB)
		M->Set("DD", Z80_PREFIX_DD)
		M->Set("FD", Z80_PREFIX_FD)
		
		M->Set("RELATIVE", Z80_IS_RELATIVE)
	}
	
	define i16 PackOpcode(i16 X, i16 Y, i16 Z) {
		return ((X << 6) | (Y << 3) | Z) As i16
	}
	define i16 PackY(i16 P, i16 Q) {
		return ((P << 1) | Q) As i16
	}
	define i32 RepackP(i16 Opcode, i16 NewP) {
		return Opcode | (NewP << 4)
	}
	define i32 RepackY(i16 Opcode, i16 NewY) {
		return Opcode | (NewY << 3)
	}
	define i32 RepackZ(i16 Opcode, i16 NewZ) {
		return Opcode | NewZ
	}
	
	define Z80Instruction** GetOpcodeMap(i32 PrefixFlags) {
		i8 NeedsCB := (PrefixFlags & Z80_PREFIX_CB) != 0
		
		if (PrefixFlags & Z80_PREFIX_DD) {
			if (NeedsCB) {
				return this->FDInstructions
			}
			else {
				return this->DDInstructions
			}
		}
		else if (PrefixFlags & Z80_PREFIX_FD) {
			if (NeedsCB) {
				return this->CBFDInstructions
			}
			else {
				return this->FDInstructions
			}
		}
		else if (PrefixFlags & Z80_PREFIX_ED) {
			return this->EDInstructions
		}
		else if (NeedsCB) {
			return this->CBInstructions
		}
		
		return this->NoPrefixInstructions
	}
	
	declare i16 PackOpcode(Z80Instruction*, i32, i16, i16)
	
	define void RegisterInstruction(Z80Instruction* Target) {
		i32 Flags := Target->Flags
		
		Z80Instruction** OpcodeMap := this->GetOpcodeMap(Flags)
		
		i8 LeftOperandIsRegister := (Flags & Z80_OP1_IS_REGISTER) != 0
		i8 RightOperandIsRegister := (Flags & Z80_OP2_IS_REGISTER) != 0
		
		i16 Opcode := 0
		
		if (LeftOperandIsRegister) {
			for (i16 LeftOperandValue := 0, LeftOperandValue < 8, LeftOperandValue += 1) {
				if (RightOperandIsRegister) {
					for (i16 RightOperandValue := 0, RightOperandValue < 8, RightOperandValue += 1) {
						Opcode := this->PackOpcode(Target, Flags, LeftOperandValue, RightOperandValue)
						
						OpcodeMap[Opcode] := Target
						
						;Print("M[%x] := ", Opcode)
						;Target->Name->PrintLine()
					}
				}
				else {
					Opcode := this->PackOpcode(Target, Flags, LeftOperandValue, 0)
					
					OpcodeMap[Opcode] := Target
					
					;Print("M[%x] := ", Opcode)
					;Target->Name->PrintLine()
				}
			}
		}
		else if (RightOperandIsRegister) {
			for (RightOperandValue := 0, RightOperandValue < 8, RightOperandValue += 1) {
				Opcode := this->PackOpcode(Target, Flags, 0, RightOperandValue)
				
				OpcodeMap[Opcode] := Target
				
				;Print("M[%x] := ", Opcode)
				;Target->Name->PrintLine()
			}
		}
		else {
			OpcodeMap[Target->Opcode] := Target
			
			;Print("M[%x] := ", Target->Opcode)
			;Target->Name->PrintLine()
		}
	}
	
	define void LoadInstructions(i8* InstructionListing) {
		i32 Length := StringLength(InstructionListing)
		
		LexerState* Lexer := LexerState:New(Alloc(#BuildConfig), AToW(InstructionListing, Length), Length, AToS("N/A")) 
		
		this->BuildSymbolMap(Lexer~>Keywords)
		
		HashMap* Instructions := this~>Instructions
		
		Instructions->Initialize()
		Instructions->IgnoreCase := true
		
		loop {
			Token* InstructionNameToken := Lexer->GetNextToken()
			
			if !(InstructionNameToken->Is(TOKEN_TYPE_IDENTIFIER)) {
				break
			}
			
			Z80Instruction* NewListHead := Alloc(#Z80Instruction)
			
			SafeWideString* InstructionName := InstructionNameToken->StringValue
			NewListHead->Name := InstructionName
			
			i8 X := Lexer->GetNextToken()->IntegerValue As i8
			Lexer->Consume(TOKEN_TYPE_OPERATOR, OPERATOR_PLUS, "Expected '+'")
			i8 Z := Lexer->GetNextToken()->IntegerValue As i8
			Lexer->Consume(TOKEN_TYPE_OPERATOR, OPERATOR_PLUS, "Expected '+'")
			i8 YOrQ := Lexer->GetNextToken()->IntegerValue As i8
			
			if (Lexer->NextTokenMatches(TOKEN_TYPE_OPERATOR, OPERATOR_PLUS)) {
				i8 P := Lexer->GetNextToken()->IntegerValue As i8
				
				NewListHead->Opcode := this->PackOpcode(X, this->PackY(P, YOrQ), Z)
			}
			else {
				NewListHead->Opcode := this->PackOpcode(X, YOrQ, Z)
			}
			
			for (i8 OperandIndex := 0, OperandIndex < 2, OperandIndex += 1) {
				NewListHead->PackedOperands |= Lexer->GetNextToken()->IntegerValue << ((OperandIndex * 32) As i8)
				
				if !(Lexer->NextTokenMatches(TOKEN_TYPE_PUNCTUATION, PUNCTUATION_COMMA)) {
					break
				}
			}
			
			i8 IsFirstOption := true
			
			while (IsFirstOption || Lexer->NextTokenMatches(TOKEN_TYPE_OPERATOR, OPERATOR_OR)) {
				NewListHead->Flags |= Lexer->GetNextToken()->IntegerValue As i32
				
				IsFirstOption := false
			}
			
			;InstructionName->Print()
			;Print("	{ Opcode: %x,		Flags: %x, 	Operands: %x }\n", NewListHead->Opcode, NewListHead->Flags, NewListHead->PackedOperands)
			
			this->RegisterInstruction(NewListHead)
			
			HashMapElement* OldListHeadElement := Instructions->Get(InstructionName)
			
			if (OldListHeadElement != null) {
				Z80Instruction* OldListHead := OldListHeadElement->Value
				
				;Print("		NH: %x		OLH: %x		NLH: %x		OLHN: %x\n", Instructions->HashString(InstructionName), OldListHead, NewListHead, OldListHead->Next)
				
				NewListHead->Next := OldListHead->Next
				OldListHead->Next := NewListHead
			}
			else {
				;Print("		NH: %x		OLH: 0x0		NLH: %x\n", Instructions->HashString(InstructionName), NewListHead)
				
				Instructions->Set(InstructionName, NewListHead)
			}
		}
	}
	
	define Z80Instruction* LookupInstruction(SafeWideString* Name, i64 PackedOperands) {
		;Name->Print()
		;Print(" looking for %x\n", PackedOperands)
		
		HashMapElement* ListHeadElement := this~>Instructions->Get(Name)
		
		if !(ListHeadElement) {
			return null
		}
		
		Z80Instruction* ListHead := ListHeadElement->Value As Z80Instruction*
		
		while (ListHead) {
			;Print("	%x: %x\n", ListHead, ListHead->PackedOperands)
			
			if (PackedOperands = 0) {
				if (ListHead->PackedOperands = 0) {
					return ListHead
				}
			}
			else if (ListHead->PackedOperands & PackedOperands = PackedOperands) {
				return ListHead
			}
			
			ListHead := ListHead->Next
		}
		
		return null
	}
	
	define i8 LookupRegister(Token* RegisterToken, i32* OutType) {
		SafeWideString* RegisterName := RegisterToken->StringValue
		
		HashMapElement* FoundRegisterElement := this~>Registers->Get(RegisterName)
		
		if !(FoundRegisterElement) {
			*OutType := 0
			return 0
		}
		
		i8 FoundRegisterNumber := FoundRegisterElement->Value As i8
		i32 FoundRegisterType := 1 << FoundRegisterNumber
		
		if (RegisterName->Length = 2 && FoundRegisterNumber < 4) {
			; FoundRegisterNumber is 0-3, aka BC-SP (the RP range), so shift left by 8 to get a register type
			
			if (RegisterName->Equals("af")) {
				*OutType := Z80_RP2_AF
			}
			else {
				*OutType := FoundRegisterType << 8
			}
		}
		else {
			*OutType := FoundRegisterType
		}
		
		;RegisterName->Print()
		;Print(" is type %x, value %x\n", *OutType, FoundRegisterNumber)
		
		return FoundRegisterNumber
	}
	
	define i32 FindOrAddLabel(Token* LabelNameToken, i8 Find) {		
		i32 Index := this->LabelPositionCount
		
		HashMapElement* LabelElement := this->LabelNameToIndex->Get(LabelNameToken->StringValue)
		
		if (LabelElement != null) {
			Index := LabelElement->Value As i32
			
			i32 LabelValue := this->LabelPositions[Index]
			
			if (LabelValue != 0x7FFF && Find = false) {
				LabelNameToken->Error("Duplicate label definition")
			}
		}
		else {
			this->LabelPositionCount += 1
			this->LabelPositions := ReAlloc(this->LabelPositions, this->LabelPositionCount * #i16)
			this->LabelReferenceBlameTokens := ReAlloc(this->LabelReferenceBlameTokens, this->LabelPositionCount * #i16)
			
			this->LabelNameToIndex->Set(LabelNameToken->StringValue, Index)
			
			this->LabelPositions[Index] := 0x7FFF
			this->LabelReferenceBlameTokens[Index] := LabelNameToken
		}
		
		if !(Find) {
			this->LabelPositions[Index] := this->MemoryIndex As i16
		}
		
		return Index
	}
	
	define i32 MakeLabelReference(Token* LabelNameToken) {
		i32 Index := this->FindOrAddLabel(LabelNameToken, true)
		
		return 0x1_0000 | (Index << 17)
	}
	
	define i64 ParseOperand() {
		i32 Type := 0
		i32 Value := 0
		
		if (this->Lexer->NextTokenMatches(TOKEN_TYPE_PUNCTUATION, PUNCTUATION_OPEN_PAREN)) {
			Token* IndirectToken := this->Lexer->GetNextToken()
			
			if (IndirectToken->Is(TOKEN_TYPE_INTEGER)) {
				Type := Z80_I16I
				Value := IndirectToken->IntegerValue As i32
			}
			else if (IndirectToken->Is(TOKEN_TYPE_IDENTIFIER)) {
				i8 IndirectRegister := this->LookupRegister(IndirectToken, &Type)
				
				if (Type = 0) {
					Type := Z80_I16I
					
					HashMapElement* IndirectElement := this->Constants->Get(IndirectToken->StringValue)
					
					if (IndirectElement = null) {
						Value := IndirectElement->Value As i32
					}
					else {
						Value := this->MakeLabelReference(IndirectToken)
					}
				}
				else if (Type = Z80_IX || Type = Z80_IY && this->Lexer->NextTokenMatches(TOKEN_TYPE_OPERATOR)) {
					Token* DisplacementOperator := this->Lexer->GetCurrentToken()
					i8 Displacement := this->Lexer->Consume(TOKEN_TYPE_INTEGER, "Expected displacement value")->IntegerValue As i8
					
					if (DisplacementOperator->Is(TOKEN_TYPE_OPERATOR, OPERATOR_MINUS)) {
						Displacement := -Displacement
					}
					
					if (Type = Z80_IX) {
						Type := Z80_IX_DISP
					}
					else if (Type = Z80_IY) {
						Type := Z80_IY_DISP
					}
					
					Value := Displacement
					Value &= 0xFF
				}
				else {
					if (Type & Z80_R) {
						if (IndirectRegister != Z80_REGISTER_HLI) {
							IndirectToken->Error("Invalid register for indirect operand")
						}
					}
					else {
						; rp -> rpi
						Type := Type << 4
					}
					
					Value := IndirectRegister
				}
			}
			
			this->Lexer->Consume(TOKEN_TYPE_PUNCTUATION, PUNCTUATION_CLOSE_PAREN, "Expected ')' after indirect operand")
		}
		else {
			Token* OperandToken := this->Lexer->GetNextToken()
			
			if (OperandToken->Is(TOKEN_TYPE_IDENTIFIER)) {
				Value := this->LookupRegister(OperandToken, &Type)
				
				if (Type = 0) {
					Type := Z80_I
					
					HashMapElement* ValueElement := this->Constants->Get(OperandToken->StringValue)
					
					if (ValueElement = null) {
						Value := this->MakeLabelReference(OperandToken)
					}
					else {
						Value := ValueElement->Value As i32
					}
				}
			}
			else if (OperandToken->Is(TOKEN_TYPE_INTEGER)) {
				Type := Z80_I
				Value := OperandToken->IntegerValue As i32
			}
		}
		
		;Print("Type = %x\n", Type)
		;Print("Value = %x\n", Value)
		
		return (Type As i64 << 32) | Value
	}
	
	define Z80InstructionNode* ParseInstruction(Token* FirstToken) {
		Z80InstructionNode* Result := Alloc(#Z80InstructionNode)
		
		i32 OperandCount := 0
		i64 OperandTypes := 0
		
		if (FirstToken->Is(TOKEN_TYPE_IDENTIFIER)) {
			while (this->Lexer->NextTokenMatches(TOKEN_TYPE_PUNCTUATION, PUNCTUATION_COMMA)) {
				i64 NextOperand := this->ParseOperand()
				
				;Print("Operands[%i] = %x\n", OperandCount, NextOperand)
				
				Result~>Operands[OperandCount] := (NextOperand & 0xFFFF_FFFF) As i32
				OperandTypes |= (NextOperand >> 32) << ((OperandCount * 32) As i8)
				
				OperandCount += 1
			}
			
			Result->PackedOperands := OperandTypes
			Result->Base := this->LookupInstruction(FirstToken->StringValue, OperandTypes)
			
			if !(Result->Base) {
				FirstToken->Error("No instruction matches operand types")
			}
		}
		
		return Result
	}
	
	declare void AssembleInstruction(Z80InstructionNode*)
	declare void AppendI8(i32)
	declare void AppendI16(i32)
	declare void MarkLabelReference(i32)
	
	define void ParseProgram() {
		loop {
			if (this->Lexer->AtEnd()) {
				break
			}
			
			Token* FirstToken := this->Lexer->GetNextToken()
			
			if (FirstToken->Is(TOKEN_TYPE_EOF)) {
				break
			}
			else if (FirstToken->Is(TOKEN_TYPE_OPERATOR, OPERATOR_BANG)) {
				Token* DirectiveNameToken := this->Lexer->Consume(TOKEN_TYPE_IDENTIFIER, "Expected directive name")
				
				SafeWideString* DirectiveName := DirectiveNameToken->StringValue
				i8 IsFirstInlineValue := true
				
				if (DirectiveName->Equals("org")) {
					Token* NewMemoryIndexToken := this->Lexer->Consume(TOKEN_TYPE_INTEGER, "Expected new org address")
					i32 NewMemoryIndex := NewMemoryIndexToken->IntegerValue As i32
					
					if (NewMemoryIndex > 0xFFFF) {
						NewMemoryIndexToken->Error("Org address out of bounds")
					}
					
					this->MemoryIndex := NewMemoryIndex
				}
				else if (DirectiveName->Equals("db")) {
					while (IsFirstInlineValue || this->Lexer->NextTokenMatches(TOKEN_TYPE_PUNCTUATION, PUNCTUATION_COMMA)) {
						Token* ByteToken := this->Lexer->GetNextToken()
						
						if (ByteToken->Is(TOKEN_TYPE_INTEGER)) {
							i32 Byte := ByteToken->IntegerValue As i32
							
							if (Byte > 0xFF) {
								ByteToken->Error("'db' value must fit in a single byte")
							}
						
							this->AppendI8(Byte)
						}
						else if (ByteToken->Is(TOKEN_TYPE_STRING)) {
							SafeWideString* StringValue := ByteToken->StringValue
							
							for (i32 StringIndex := 0, StringIndex < StringValue->Length, StringIndex += 1) {
								this->AppendI8(StringValue->ASCIICharacterAt(StringIndex))
							}
						}
						
						IsFirstInlineValue := false
					}
				}
				else if (DirectiveName->Equals("dw")) {
					while (IsFirstInlineValue || this->Lexer->NextTokenMatches(TOKEN_TYPE_PUNCTUATION, PUNCTUATION_COMMA)) {
						Token* WordToken := this->Lexer->GetNextToken()
						
						i32 Word := 0
						
						if (WordToken->Is(TOKEN_TYPE_INTEGER)) {
							Word := WordToken->IntegerValue As i32
						}
						else if (WordToken->Is(TOKEN_TYPE_IDENTIFIER)) {
							i32 LabelNumber := this->FindOrAddLabel(WordToken, true)
							
							this->MarkLabelReference(LabelNumber)
						}
						
						if (Word > 0xFFFF) {
							WordToken->Error("'dw' value must fit in a single word")
						}
						
						this->AppendI16(Word)
						
						IsFirstInlineValue := false
					}
				}
				else if (DirectiveName->Equals("set")) {
					Token* NameToken := this->Lexer->Consume(TOKEN_TYPE_IDENTIFIER, "Expected constant name")
					Token* ValueToken := this->Lexer->Consume(TOKEN_TYPE_INTEGER, "Expected constant value")
					
					HashMapElement* NameElement := this->Constants->Get(NameToken->StringValue)
					
					if (NameElement != null) {
						NameToken->Error("Duplicate constant definition")
					}
					
					this->Constants->Set(NameToken->StringValue, ValueToken->IntegerValue)
				}
			}
			else if (FirstToken->Is(TOKEN_TYPE_IDENTIFIER)) {
				if (this->Lexer->NextTokenMatches(TOKEN_TYPE_OPERATOR, OPERATOR_COLON)) {
					this->FindOrAddLabel(FirstToken, false)
				}
				else {
					this->AssembleInstruction(this->ParseInstruction(FirstToken))
				}
			}
		}
	}
	
	define void EnsureCapacity() {
		if (this->MemoryIndex + 1 >= Z80_MEMORY_SIZE) {
			this->MemoryIndex := 0
		}
	}
	
	define void AppendI8(i32 Value) {
		this->EnsureCapacity()
		
		this->MemoryBytes[this->MemoryIndex] := (Value & 0xFF) As i8
		this->MemoryIndex += 1
	}
	define void AppendI16(i32 Value) {
		this->AppendI8(Value & 0xFF)
		this->AppendI8(Value >> 8)
	}
	
	define void AppendImmediate(i8 IsI8, i16 Value) {
		if (IsI8) {
			this->AppendI8(Value)
		}
		else {
			this->AppendI16(Value)
		}
	}
	
	define void MarkLabelReference(i32 LabelNumber) {
		i32 Index := this->LabelReferenceCount
		
		this->LabelReferenceCount += 1
		this->LabelReferences := ReAlloc(this->LabelReferences, this->LabelReferenceCount * #i32)
		
		this->LabelReferences[Index] := (LabelNumber << 16) | this->MemoryIndex
	}
	
	define i16 PackOpcode(Z80Instruction* Instruction, i32 Flags, i16 LeftOperand, i16 RightOperand) {
		i16 Opcode := Instruction->Opcode
		
		if 		(Flags & Z80_P_IS_OP1) { Opcode := this->RepackP(Opcode, LeftOperand) As i16 }
		else if (Flags & Z80_Y_IS_OP1) { Opcode := this->RepackY(Opcode, LeftOperand) As i16 }
		else if (Flags & Z80_Z_IS_OP1) { Opcode := this->RepackZ(Opcode, LeftOperand) As i16 }
		
		if 		(Flags & Z80_P_IS_OP2) { Opcode := this->RepackP(Opcode, RightOperand) As i16 }
		else if (Flags & Z80_Y_IS_OP2) { Opcode := this->RepackY(Opcode, RightOperand) As i16 }
		else if (Flags & Z80_Z_IS_OP2) { Opcode := this->RepackZ(Opcode, RightOperand) As i16 }
		
		return Opcode
	}
	
	define void AssembleInstruction(Z80InstructionNode* Instruction) {
		Z80Instruction* Base := Instruction->Base
		
		i16 LeftOperand := Instruction~>Operands[0] As i16
		i16 RightOperand := Instruction~>Operands[1] As i16
		i16 Flags := Base->Flags As i16
		
		;Print("\nOpcode: %x\nFlags: %x\n", Opcode, Flags)
		;Print("Left = %x, Right = %x\n", LeftOperand, RightOperand)
		
		if 		(Flags & Z80_PREFIX_DD) { this->AppendI8(0xDD) }
		else if (Flags & Z80_PREFIX_FD) { this->AppendI8(0xFD) }
		else if (Flags & Z80_PREFIX_ED) { this->AppendI8(0xED) }
		
		if 		(Flags & Z80_PREFIX_CB) { this->AppendI8(0xCB) }
		
		;Print("New Opcode: %x\n", Opcode)
		
		this->AppendI8(this->PackOpcode(Base, Flags, LeftOperand, RightOperand))
		
		for (i32 OperandIndex := 0, OperandIndex < 2, OperandIndex += 1) {
			i32 NextOperand := Instruction~>Operands[OperandIndex]
			i32 NextOperandType := (Instruction->PackedOperands >> ((OperandIndex * 32) As i8)) As i32
			
			if (NextOperandType = Z80_I || NextOperandType = Z80_I16I) {
				if (NextOperand & 0x1_0000) {
					i32 LabelIndex := NextOperand >> 17
					
					this->MarkLabelReference(LabelIndex)
				}
			}
		}
		
		if		(Flags & Z80_D_IS_OP1) { this->AppendI8(LeftOperand) }
		else if	(Flags & Z80_D_IS_OP2) { this->AppendI8(RightOperand) }
		
		i8 ImmediateIsI8 := !!(Flags & Z80_HAS_I8)
		
		if 		(Flags & Z80_I_IS_OP1) { this->AppendImmediate(ImmediateIsI8, LeftOperand) }
		else if (Flags & Z80_I_IS_OP2) { this->AppendImmediate(ImmediateIsI8, RightOperand) }
	}
	
	define void Link() {
		for (i32 Index := 0, Index < this->LabelReferenceCount, Index += 1) {
			i32 NextLabel := this->LabelReferences[Index]
			
			i32 TargetLabelIndex := NextLabel >> 16
			i32 TargetPosition := NextLabel & 0xFFFF
			
			i32 TargetLabelPosition := this->LabelPositions[TargetLabelIndex]
			
			if (TargetLabelPosition = 0x7FFF) {
				this->LabelReferenceBlameTokens[TargetLabelIndex]->Error("Label not found")
			}
			
			(this->Memory + TargetPosition As i16*)[0] := TargetLabelPosition As i16
		}
	}
	
	define void Print() {
		for (i32 Index := 0, Index < this->MemoryIndex, Index += 1) {
			i8 Next := this->MemoryBytes[Index]
			
			PrintCharacter(NumberToCharacter((Next >> 4) & 0x0F As i8))
			PrintCharacter(NumberToCharacter((Next & 0x0F) As i8))
			
			Print(" ")
		}
		
		Print("\n")
	}
	
	define void WriteToFile(i8* FilePath) {
		i64 File := FileOpen(FilePath, FILE_WRITE | FILE_CREATE_NEW)
		
		FileWrite(File, this->Memory, Z80_MEMORY_SIZE)
		
		FileClose(File)
	}
	
	define i8* GetRegisterName(i32 RegisterType, i32 RegisterValue) {
		i8*{8} R {"b", "c", "d", "e", "h", "l", "(hlb)", "a"}
		i8*{4} RP {"bc", "de", "hl", "sp"}
		i8*{4} RPI {"(bc)", "(de)", "(hl)", "(sp)"}
		i8*{4} RP2 {"bc", "de", "hl", "af"}
		i8*{4} RP2I {"(bc)", "(de)", "(hl)", "(af)"}
		
		if (RegisterType = Z80_R) { return R[RegisterValue] }
		if (RegisterType = Z80_RP) { return RP[RegisterValue] }
		if (RegisterType = Z80_RPI) { return RP[RegisterValue] }
		if (RegisterType = Z80_RP2) { return RP[RegisterValue] }
		if (RegisterType = Z80_RP2I) { return RP[RegisterValue] }
		if (RegisterType = Z80_IRV) { return "i" }
		if (RegisterType = Z80_RFC) { return "r" }
		if (RegisterType = Z80_IX) { return "ix" }
		if (RegisterType = Z80_IY) { return "iy" }
		if (RegisterType = Z80_IXL) { return "ixl" }
		if (RegisterType = Z80_IXH) { return "ixh" }
		if (RegisterType = Z80_IYL) { return "iyl" }
		if (RegisterType = Z80_IYH) { return "iyh" }
		
		i8*{29} AllRegisters {"b", "c", "d", "e", "h", "l", "(hlb)", "a",
							  "bc", "de", "hl", "sp",
							  "(bc)", "(de)", "(hl)", "(sp)",
							  "af", "(af)",
							  "", "", "",
							  "i", "r",
							  "ix", "ix",
							  "ixl", "ixh", "iyl", "iyh"}
		
		if (RegisterValue = -1) {
			i32 Index := FindFirstBitSet(RegisterType)
			
			return AllRegisters[Index]
		}
		
		return null
	}
	
	define i8* DisassembleRegister(i8* Buffer, i32 RegisterType, i32 RegisterValue) {
		i8* Name := this->GetRegisterName(RegisterType, RegisterValue)
		
		if (Name = null) {
			i8{2} TempName {('0' + RegisterValue) As i8, 0}
			
			Name := TempName
		}
		
		i32 Length := StringLength(Name)
		
		MoveMemory(Buffer, Name, Length)
		
		return Buffer + Length
	}
	
	define i8* DisassembleOperand(i32 Offset, i8* Buffer, i8* Opcode, i32 OperandType, i32 Flags, i32* InstructionLength) {
		i8 OpcodeByte := *Opcode
		
		if (Flags & Z80_I_IS_OP1) {
			i32 ImmediateI8 := Opcode[1] & 0xFF
			i32 ImmediateI16 := *(Opcode + 1 As i16*) & 0xFFFF
			
			if (OperandType & Z80_I16I) {
				Buffer[0] := '('
				Buffer := IToA(ImmediateI16, 16, Buffer + 1, true)
				Buffer += StringLength(Buffer)
				Buffer[0] := ')'
				Buffer += 1
				
				*InstructionLength += 2
			}
			else {
				*InstructionLength += 1
	
				if (Flags & Z80_HAS_I8) {	
					if (Flags & Z80_IS_RELATIVE) {
						i32 EffectiveAddress := (Offset + ImmediateI8) & 0xFFFF
						
						EffectiveAddress += *InstructionLength
						
						Buffer := IToA(EffectiveAddress, 16, Buffer)
					}
					else {
						Buffer := IToA(ImmediateI8, 16, Buffer)
					}
				}
				else {
					Buffer := IToA(ImmediateI16, 16, Buffer)
					
					*InstructionLength += 1
				}
				
				Buffer += StringLength(Buffer)
			}
		}
		else if (Flags & Z80_D_IS_OP1) {
			*InstructionLength += 1
			
			i8 DisplacementValue := Opcode[1]
			
			; By default, assume a Z80_PREFIX_DD instruction (aka an instruction that uses `ix` instead of `iy`)
			;  which takes a positive displacement
			
			i8* DisplacementBase := "(ix + "
			
			if (Flags & Z80_PREFIX_FD) {
				; Correct for a Z80_PREFIX_FD instruction (aka using `iy` instead of `ix`)
				
				DisplacementBase := "(iy + "
			}
			
			MoveMemory(Buffer, DisplacementBase, 6)
			
			if (DisplacementValue < 0) {
				; Correct for a negative displacement, and replace the `+` in `DisplacementBase` with a `-`
				
				Buffer[4] := '-'
				DisplacementValue := -DisplacementValue
			}
			
			Buffer += 6
			
			Buffer := IToA(DisplacementValue, 16, Buffer, true)
			Buffer += StringLength(Buffer)
			
			Buffer[0] := ')'
			Buffer += 1
		}
		else if (Flags & Z80_Z_IS_OP1) {
			i32 ZValue := OpcodeByte & 0b00_000_111
			
			Buffer := this->DisassembleRegister(Buffer, OperandType, ZValue)
		}
		else if (Flags & Z80_Y_IS_OP1) {
			i32 YValue := (OpcodeByte & 0b00_111_000) >> 3
			
			Buffer := this->DisassembleRegister(Buffer, OperandType, YValue)
		}
		else if (Flags & Z80_P_IS_OP1) {
			i32 PValue := (OpcodeByte & 0b00_110_000) >> 4
			
			Buffer := this->DisassembleRegister(Buffer, OperandType, PValue)
		}
		else {
			Buffer := this->DisassembleRegister(Buffer, OperandType, -1)
		}
		
		return Buffer
	}
	
	define i8* Disassemble(i32 Offset, Z80Instruction* Instruction, i8* Opcode, i32* OutInstructionLength) {
		i8* Disassembly := Alloc(26)
		i8* Buffer := Disassembly
		
		for (i32 NameIndex := 0, NameIndex < Instruction->Name->Length, NameIndex += 1) {
			Buffer[NameIndex] := Instruction->Name->ASCIICharacterAt(NameIndex)
		}
		
		Buffer += NameIndex
		
		i32 LeftOperand := Instruction~>Operands[0]
		i32 RightOperand := Instruction~>Operands[1]
		
		i32 Flags := Instruction->Flags
		
		*OutInstructionLength += 1
		
		if (LeftOperand != 0) {
			MoveMemory(Buffer, ", ", 2)
			Buffer += 2
			
			Buffer := this->DisassembleOperand(Offset, Buffer, Opcode, LeftOperand, Flags, OutInstructionLength)
		}
		
		if (RightOperand != 0) {
			MoveMemory(Buffer, ", ", 2)
			Buffer += 2
			
			; Translate all `FIELD_IS_OP2` flags into `FIELD_IS_OP1` so `DisassembleOperand` can handle them corrrectly
			
			Flags := (Flags & 0xFF) >> 4 | (Flags & Z80_D_IS_OP2) >> 1 | (Flags & 0xFC00)
			
			Buffer := this->DisassembleOperand(Offset, Buffer, Opcode, RightOperand, Flags, OutInstructionLength)
		}
		
		return Disassembly
	}
	
	define Z80Instruction* MatchBytesToInstruction(i8* Opcode, i32* OutOffset) {
		i32 Flags := 0
		i32 PrefixCount := 0
		
		if (Opcode[0] = 0xDD) {
			Flags |= Z80_PREFIX_DD
			PrefixCount += 1
		}
		else if (Opcode[0] = 0xFD) {
			Flags |= Z80_PREFIX_FD
			PrefixCount += 1
		}
		
		if (Opcode[0] = 0xED) {
			Flags |= Z80_PREFIX_ED
			PrefixCount += 1
		}
		else if (Opcode[PrefixCount] = 0xCB) {
			Flags |= Z80_PREFIX_CB
			PrefixCount += 1
		}
		
		i16 OpcodeByte := Opcode[PrefixCount] & 0xFF
		
		;Print("Flags: %x, Index %x\n", Flags, OpcodeByte)
		
		Z80Instruction** OpcodeMap := this->GetOpcodeMap(Flags)
		
		Z80Instruction* FoundInstruction := OpcodeMap[OpcodeByte]
		
		if (FoundInstruction = null && PrefixCount = 0) {
			*OutOffset += 1
		}
		
		*OutOffset += PrefixCount
		
		return FoundInstruction
	}
}

define void Usage(i8* ExtraMessage) {
	Print("%s\n", ExtraMessage)
	
	windows {
		i8* Extension := "exe"
	}
	linux {
		i8* Extension := "elf"
	}
	
	Print("Usage: Z80.%s assemble AssemblyFile OutputBinaryFile\n", Extension)
	Print("       Z80.%s disassemble BinaryFile [StartOffset] [EndOffset]\n", Extension)
}

define void Main(i64 ArgC, i8** ArgV) {
	GetArgs(&ArgC, &ArgV)
	
	if (ArgC < 3) {	
		Usage("Not enough arguments\n")
		return
	}
	
	i64 File := FileOpen(ArgV[2], FILE_READ)
	i8* Text := FileReadAll(File)
	i32 Length := FileGetSize(File)
	FileClose(File)
	
	i8* Verb := ArgV[1]
	
	Z80Assembler* Z80 := Z80Assembler:New({i8 file: "./Z80.txt"}, Text)
	
	if (StringEquals(Verb, "assemble")) {
		if (ArgC != 4) {
			Usage("Missing OutputBinaryFile argument\n")
			return
		}
		
		Z80->ParseProgram()
		Z80->Link()
		
		Z80->Print()
		Z80->WriteToFile(ArgV[3])	
	}
	else if (StringEquals(Verb, "disassemble")) {
		i8* Bytes := Text
		i32 Offset := 0
		
		if (ArgC >= 4) {
			Offset := AToI(ArgV[3]) As i32
		}
		if (ArgC >= 5) {
			i32 NewLength := AToI(ArgV[4]) As i32
			
			if (NewLength < Length) {
				Length := NewLength
			}
		}
		
		i8* OffsetString := Alloc(8)
		
		while (Offset < Length) {
			IToA(Offset, 16, OffsetString, false)
			
			for (i32 Padding := StringLength(OffsetString), Padding < 4, Padding += 1) {
				Print("0")
			}
			
			Print("%s: ", OffsetString)
			
			i32 InnerOffset := 0
			
			Z80Instruction* Instruction := Z80->MatchBytesToInstruction(Bytes + Offset, &InnerOffset)
			
			if (Instruction = null) {
				Print("!db %x\n", Bytes[Offset] & 0xFF)
			}
			else {
				Print("%s\n", Z80->Disassemble(Offset, Instruction, Bytes + Offset + InnerOffset, &InnerOffset))
			}
			
			Offset += InnerOffset
		}
	}
}
